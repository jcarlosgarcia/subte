1
00:00:00,000 --> 00:00:00,500

2
00:00:00,500 --> 00:00:02,279
En esta semana vamos a tratar
principalmente de índices.

3
00:00:02,279 --> 00:00:03,820
Y muy al final de la semana,

4
00:00:03,820 --> 00:00:05,400
vamos a tratar algo de 
particionado (sharding),

5
00:00:05,400 --> 00:00:07,410
que consiste en distribuir
las consultas a la base de datos

6
00:00:07,410 --> 00:00:08,682
entre varios servidores.

7
00:00:08,682 --> 00:00:10,640
Aunque antes de eso,
tenemos que presentar 

8
00:00:10,640 --> 00:00:14,790
qué es el motor de almacenamiento
dentro de una base de datos,

9
00:00:14,790 --> 00:00:16,890
ya que ha sido un año magnífico
para MongoDB.

10
00:00:16,890 --> 00:00:21,260
Como novedad en MongoDB 3.0 está
la posibilidad de motores de

11
00:00:21,260 --> 00:00:22,090
almacenamiento acoplables.

12
00:00:22,090 --> 00:00:23,570
Bien, y ¿qué es un motor de almacenamiento?

13
00:00:23,570 --> 00:00:26,070
Un motor de almacenamiento 
es la interfaz 

14
00:00:26,070 --> 00:00:28,780
entre el almacenamiento
permanente, que

15
00:00:28,780 --> 00:00:31,810
denominaremos discos y que 
pueden ser discos de estado sólido (SSD),

16
00:00:31,810 --> 00:00:34,830
y la propia base de datos, 
MongoDB.

17
00:00:34,830 --> 00:00:36,840
Este es el servidor Mongo.

18
00:00:36,840 --> 00:00:39,700
Así que el servidor MongoDB
habla con el disco,

19
00:00:39,700 --> 00:00:43,360
el almacenamiento permanente,
mediante el motor de almacenamiento.

20
00:00:43,360 --> 00:00:46,084
Bien, aquí tenemos el motor de
almacenamiento.

21
00:00:46,084 --> 00:00:48,250
Y tú, como programador,
vas a escribir,

22
00:00:48,250 --> 00:00:49,900
pongamos, un programa en Python.

23
00:00:49,900 --> 00:00:52,320
Así que escribes
tu programa en Python

24
00:00:52,320 --> 00:00:57,110
y utilizas el driver 
PyMongo, que

25
00:00:57,110 --> 00:01:00,670
habla con el servidor de base de
datos mediante un protocolo de conexión.

26
00:01:00,670 --> 00:01:04,230
Y cuando el programa quiera crear datos, 
leer datos, actualizarlos,

27
00:01:04,230 --> 00:01:07,840
o borrarlos, hablará con el 
motor de almacenamiento que 

28
00:01:07,840 --> 00:01:09,950
hablará entonces con el disco.

29
00:01:09,950 --> 00:01:12,530
Y todas la estructuras 
implicadas que

30
00:01:12,530 --> 00:01:14,300
mantienen los documentos,
los índices,

31
00:01:14,300 --> 00:01:16,440
y los metadatos relativos
a los documentos

32
00:01:16,440 --> 00:01:18,810
también se escriben en un
almacenamiento persistente

33
00:01:18,810 --> 00:01:20,830
mediante el motor de almacenamiento.

34
00:01:20,830 --> 00:01:23,730
Bien, puede darse el caso que
el motor de almacenamiento 

35
00:01:23,730 --> 00:01:28,310
decida utilizar la memoria 
para optimizar el proceso.

36
00:01:28,310 --> 00:01:31,230
Dicho de otra forma, el 
disco es muy lento.

37
00:01:31,230 --> 00:01:34,730
Como el objetivo de una base de datos
es almacenar cosas de forma persistente,

38
00:01:34,730 --> 00:01:36,510
lo que pasa es que
el motor de almacenamiento

39
00:01:36,510 --> 00:01:38,930
controla la memoria del 
ordenador

40
00:01:38,930 --> 00:01:41,800
y puede decidir
qué pone en la memoria,

41
00:01:41,800 --> 00:01:45,030
qué saca de la memoria
y qué se graba en el disco

42
00:01:45,030 --> 00:01:45,800
y cuándo.

43
00:01:45,800 --> 00:01:48,340
Así la propia base de datos
delega la gestión

44
00:01:48,340 --> 00:01:51,264
de la memoria en el servidor
así como lo hace el disco

45
00:01:51,264 --> 00:01:52,180
en el motor de almacenamiento.

46
00:01:52,180 --> 00:01:52,830

47
00:01:52,830 --> 00:01:56,250
Bien, ahora disponemos de una arquitectura
modular para los motores de almacenamiento

48
00:01:56,250 --> 00:01:58,116
de manera que se puede usar más de uno.

49
00:01:58,116 --> 00:01:59,990
El concepto es como si tuvieras
un coche

50
00:01:59,990 --> 00:02:02,120
y pudieras ponerle diferentes
motores.

51
00:02:02,120 --> 00:02:03,870
Pones un motor en
el coche,

52
00:02:03,870 --> 00:02:06,520
y seguramente se obtendrían unas
características de rendimiento

53
00:02:06,520 --> 00:02:07,740
del coche.

54
00:02:07,740 --> 00:02:10,060
Por ejemplo, podría
tener mayor aceleración

55
00:02:10,060 --> 00:02:12,580
o podría conseguir mejores
o peores consumos

56
00:02:12,580 --> 00:02:15,960
dependiendo del tipo de motor
que se haya puesto en el coche.

57
00:02:15,960 --> 00:02:18,100
De manera análoga, dependiendo del
tipo de motor 

58
00:02:18,100 --> 00:02:20,360
que se ponga en MongoDB, 
se obtendrían 

59
00:02:20,360 --> 00:02:22,530
diferentes características
de rendimiento.

60
00:02:22,530 --> 00:02:23,450
Por esto es importante 
que tengamos

61
00:02:23,450 --> 00:02:25,110
ciertas nociones de esto

62
00:02:25,110 --> 00:02:27,144
antes de avanzar esta semana.

63
00:02:27,144 --> 00:02:28,560
Principalmente hay dos
motores de almacenamiento soportados

64
00:02:28,560 --> 00:02:31,170
que vienen con MongoDB,
uno de ellos 

65
00:02:31,170 --> 00:02:35,530
se llama MMAP y el otro 
se denomina WiredTiger.

66
00:02:35,530 --> 00:02:36,615
MMAP es el que viene por defecto.

67
00:02:36,615 --> 00:02:37,990
Es el que se obtiene 
si no se indica

68
00:02:37,990 --> 00:02:41,026
ninguna opción a mongod cuando
se inicia mediante la línea de comandos.

69
00:02:41,026 --> 00:02:43,150
MMAP, vamos a ver cómo
funciona.

70
00:02:43,150 --> 00:02:45,108
Ha sido el motor de almacenamiento
desde hace tiempo.

71
00:02:45,108 --> 00:02:48,470
WiredTiger se añadió mediante una
adquisición en 2014.

72
00:02:48,470 --> 00:02:50,950
MongoDB adquirió la 
compañía WiredTiger.

73
00:02:50,950 --> 00:02:53,530
Se trata del mismo equipo
que desarrolló Berkeley DB

74
00:02:53,530 --> 00:02:57,440
y muchos de ellos estaban en
otra, SleepyCat, por si 

75
00:02:57,440 --> 00:02:59,299
conoces la historia de la compañía.

76
00:02:59,299 --> 00:03:00,965
Bien, ahora que ya tenemos 
cierta comprensión 

77
00:03:00,965 --> 00:03:02,210
de lo que es un motor de 
almacenamiento.

78
00:03:02,210 --> 00:03:03,572
Veamos qué no es un motor
de almacenamiento.

79
00:03:03,572 --> 00:03:05,780
¿Qué me dices de las cosas que
un motor de almacenamiento

80
00:03:05,780 --> 00:03:06,405
no gestiona?

81
00:03:06,405 --> 00:03:08,750
Bien, si tienes una serie de
servidores MongoDB

82
00:03:08,750 --> 00:03:10,950
ejecutándose en un cluster,
al motor de almacenamiento

83
00:03:10,950 --> 00:03:14,210
no le afectan la comunicación
entre estos servidores 

84
00:03:14,210 --> 00:03:15,140
MongoDB.

85
00:03:15,140 --> 00:03:17,355
Al motor de almacenamiento no le
afecta el API 

86
00:03:17,355 --> 00:03:20,824
que presenta la base de datos
al programador, por ejemplo.

87
00:03:20,824 --> 00:03:22,490
Es casi lo mismo usar o no

88
00:03:22,490 --> 00:03:24,014
MMAP o WiredTiger.

89
00:03:24,014 --> 00:03:26,430
Aunque van a haber algunas
diferencias en cuanto a rendimiento,

90
00:03:26,430 --> 00:03:28,630
y este es el motivo por el que
estamos hablando de ello.

91
00:03:28,630 --> 00:03:30,265
Ahora es el momento de una pregunta.

92
00:03:30,265 --> 00:03:31,890
"¿El motor de almacenamiento
determina directamente

93
00:03:31,890 --> 00:03:32,848
cuáles de las siguientes?

94
00:03:32,848 --> 00:03:34,070
Selecciona todas las correctas.

95
00:03:34,070 --> 00:03:35,210
El formato del archivo de datos.

96
00:03:35,210 --> 00:03:36,900
Arquitectura de un cluster.

97
00:03:36,900 --> 00:03:38,560
El protocolo de conexión 
para los drivers.

98
00:03:38,560 --> 00:03:40,450
Y el formato de los índices."

99
00:03:40,450 --> 00:03:42,270
No he mencionado directamente
algunos de ellos,

100
00:03:42,270 --> 00:03:45,450
aunque podrás acertarlo 
basándote en lo que he contado.
